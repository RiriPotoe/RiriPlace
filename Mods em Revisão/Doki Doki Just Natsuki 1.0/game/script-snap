default persistent.jn_snap_explanation_given = False

init 0 python in snap:
    import random
    import store

    _last_game_check = datetime.now()

    # Card config
    _card_values = range(1, 11)
    _card_suits = [
        "Hearts", # Sayori
        "Spades", # Yuri
        "Clubs", # Natsuki
        "Diamonds" # Monika
    ]
    
    # Out of game tracking
    _player_win_streak = 0
    _natsuki_win_streak = 0

    # In-game tracking
    _is_player_turn = False
    _natsuki_skill_level = 1

    # Collections of cards involved in the game
    _cards_in_deck = list()
    _cards_on_table = list()
    _natsuki_hand = list()
    _player_hand = list()

    def _generate_hands():
        """
        """
        # Generate all possible card combinations based on suits and values
        for card_suit in _card_values:
            for card_value in _card_suits:
                _cards_in_deck.append((card_suit, card_value))

        # Assign each player their deck
        random.shuffle(_cards_in_deck)
        switch = False
        for card in _cards_in_deck:
            # We alternate between Natsuki and the player's hands when giving cards out
            if switch:
                switch = False
                _player_hand.add(card)

            else:
                switch = True
                _natsuki_hand.add(card)

        # Finally clear here, since we can't remove elements while iterating through
        _cards_in_deck.clear()

    def _draw_card_from_deck(is_player=False):
        """
        """
        if is_player:
            if (len(_cards_in_deck) > 0):
                new_card = random.choice(_cards_in_deck)
                _cards_in_deck.remove(new_card)
                _player_hand.add(new_card)
                return 1

            else:
                return -1

        else:
            if (len(_cards_in_deck) > 0):
                new_card = random.choice(_cards_in_deck)
                _cards_in_deck.remove(new_card)
                _natsuki_hand.add(new_card)
                return 1

            else:
                return -1

    def _place_card_on_table(is_player=False):
        """
        """
        if is_player:
            if (len(_player_hand) > 0):
                new_card = random.choice(_player_hand)
                _cards_on_table.add(new_card)
                _player_hand.remove(new_card)
                return 1

            else:
                return -1

        else:
            if (len(_natsuki_hand) > 0):
                new_card = random.choice(_natsuki_hand)
                _cards_on_table.add(new_card)
                _natsuki_hand.remove(new_card)
                return 1

            else:
                return -1

    def _call_snap(is_player=False):
        """
        """
        # If the suit/value on the last placed card matches the preceding card, the snap is valid
        if _cards_on_table[-1] :
            if is_player:
                # Player called snap successfully; give them the cards on the table
                for card in _cards_on_table:
                    _player_hand.add(card)

            else:
                # Natsuki called snap successfully; give her the cards on the table
                for card in _cards_on_table:
                    _natsuki_hand.add(card)

            _cards_on_table.clear()

        else:
            if is_player:
                # TODO - quip by Natsuki for player messing up

            else:
                # TODO - Natsuki amger for herself messing up

        # Finally switch turns
        _is_player_turn = not _is_player_turn

    def _game_check:
        if 

label snap_intro:
    n "Alriiiight! Let's play some Snap!"
    if not persistent.jn_snap_explanation_given:
        n "Oh - before we start, did you want an explanation? You know, on how it works?"
        n "It's a super simple game, but I thought I'd better ask."
        n "I don't wanna win just because you didn't know what you were doing!"
        n "So..."
        n "How about it? Want me to run through the rules real quick?"
        menu:
            "Yes please!":
                jump snap_explanation

            "No, I'm ready.":
                n "Oh? You're ready, huh?"
                n "Ready to get your butt kicked! Let's go, [player]!"
                jump snap_start
    return

label snap_explanation:
    n "Alright! So the rules are dead simple, like I was saying."
    n "Basically, we each get half a deck of cards."
    n "Then, we take it in turns placing a card face up on the table - we don't get to {i}pick or see{/i} the card before, though!"
    n "Following me so far, [player]? Ehehe."
    n "If the card just placed down on the table matches either the {i}value or suit{/i} of the card that was there before..."
    n "Then we gotta call Snap!"
    n "Whoever calls it first gets the cards on the table."
    n "The winner is whoever ends up with all the cards first!"
    n "Which will clearly be me, obviously. Ahaha."
    n "So... how about it, [player]? You got all that?"
    menu:
        n "Do the rules all make sense to you?"
        "Could you go over them again, please?":
            n "Huh? Well, okay..."
            jump snap_explanation

        "Got it. Let's play!":
            n "That's what I'm talking about! Some fighting spirit!"
            n "I should warn you though, [player]..."
            n "I'm not gonna hold back! Let's do this!"
            jump snap_start

label snap_start:
    play audio card_shuffle
    "..."
    $ generate_deck()
    $ utils.log("player's hand: ".format(",".join(_player_hand)))
    $ utils.log("player's hand: ".format(",".join(_natsuki_hand)))
    n "Okaaay! That's the deck shuffled!"
    n "I'm just gonna flip a coin to see who goes first. No peeping, [player]!"
    play audio coin_flip
    n "..."
    $ _is_player_turn = random.choice(True, False)

    if _is_player_turn:
        n "Ehehe. Bad luck, [player]. Looks like you're up first!"
        
    else:
        n "Hmph... you got lucky this time. Looks like I'm first, [player]."

    n "...But this isn't ready yet. Oops! Ehehe."
    jump ch30_loop

    jump snap_main_loop

label snap_main_loop:

    # First, let's check to see if anyone has won yet
    if len(_cards_on_table) == 0:

        if len(_player_hand) == 0:
            # Player has lost; end the game
            _player_win_streak = 0
            _natsuki_win_streak += 1
            

        elif len(_natsuki_hand) == 0:
            # Natsuki has lost; end the game
            _player_win_streak = += 1
            _natsuki_win_streak = 0
            
    if not _is_player_turn:
        # Natsuki gets to place a card
        _place_card_on_table(False)
        _is_player_turn = True

    $ renpy.pause(delay=1.0)

    # Natsuki's snap logic
    if _cards_on_table:
        pass

    jump snap_main_loop

label snap_end:
    return

screen snap_ui:
    #TODO
    fixed:
        anchor (0, 0)